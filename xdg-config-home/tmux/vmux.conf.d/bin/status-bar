#!/bin/zsh

if [[ -z "$VMUX_BACKGROUND" ]]; then
    VMUX_BACKGROUND=236
fi

# disable line wrap
printf '\e[?7l'
# hide the cursor
printf '\e[?25l'
# default background color to $VMUX_BACKGROUND
printf '\e[48;5;%sm' "$VMUX_BACKGROUND"

setopt traps_async

trap '
    echo "force" > "$VMUX_STATUS_PIPE" &
' WINCH

min_column_width=15
max_column_width=40
column_width=15

function vmux() {
    tmux -L vmux_managed "$@"
}

session_name="$(tmux display-message -p '#S')"
session_id=""

function managed_session_exists() {
    vmux has-session -t "$session_id" > /dev/null 2>&1
}

show_full=1
input=""
lines=()
old_session_title=""
pane_height=$LINES

function refresh() {
    local input="$1"

    if ! managed_session_exists; then
        return 1
    fi

    if [[ "$input" == "toggle" ]]; then
        ((show_full = 1 - show_full))
        min_column_width=15
    fi

    current_window_id="$(vmux display-message -t "$session_id" -p '#{window_id}')"
    window_ids_str="$(vmux list-windows -t "$session_id" -F '#{window_id}')"
    window_titles_str="$(vmux list-windows -t "$session_id" -F 'x#{E:@window_title}')"

    window_ids=("${(@f)$(echo "$window_ids_str")}")
    window_titles=("${(@f)$(echo "$window_titles_str")}")

    session_title="$(vmux display-message -t "$session_id" -p '#{E:@session_title}')"
    if [[ "$session_title" != "$old_session_title" ]]; then
        tmux rename-session "$session_title"
        old_session_title="$session_title"
    fi

    session_icon="$(vmux display-message -t "$session_id" -p '#{E:@session_icon}')"
    if [[ "$show_full" -eq 1 ]]; then
        printed_session_title="$session_icon [$session_title]"

        ((column_width = ${#printed_session_title} + 2))
        for window_title in "$window_titles[@]"; do
            window_title="${window_title:1}"
            window_line_width=${#window_title}

            # add for spaces on each end, icon + space to separate from title
            ((window_line_width = window_line_width + 4))
            if [[ $window_line_width -gt $column_width ]]; then
                column_width=$window_line_width
            fi
        done

        if [[ $column_width -lt $min_column_width ]]; then
            column_width=$min_column_width
        elif [[ $column_width -gt $max_column_width ]]; then
            column_width=$max_column_width
        fi
    else
        printed_session_title="$session_icon "
        column_width=4
    fi

    min_column_width=$column_width
    tmux resize-pane -t "$TMUX_PANE" -x $column_width

    new_lines=("%b%K{$MACHINE_COLOR}%F{black}$(left_align_name "$printed_session_title ")%k")

    index=1
    for window_title in "$window_titles[@]"; do
        window_title="${window_title:1}"
        window_id="$window_ids[$index]"

        background=""
        title_foreground=""
        if [[ "$window_id" == "$current_window_id" ]]; then
            background="%B%K{black}"
            title_foreground="%F{15}"
        else
            background="%b%K{$VMUX_BACKGROUND}"
            title_foreground="%F{white}"
        fi

        icon="$(vmux display-message -p -t "$window_id" '#{E:@window_icon}')"
        if [[ -z "$icon" ]]; then
            icon=" "
        fi

        icon_color="$(vmux display-message -p -t "$window_id" '#{E:@window_icon_color}')"
        icon_foreground="%F{$icon_color}"

        if [[ "$show_full" -eq 1 ]]; then
            right_aligned_window_title="$(right_align_name $window_title)"
            right_aligned_window_title="${right_aligned_window_title:3}"

            style_name="$(vmux display-message -p -t "$window_id" '#{E:@window_title_style}')"
            style_before=""
            style_after=""
            if [[ "$style_name" == "italic" ]]; then
                style_before="\\e[3m"
                style_after="\\e[0m"
            fi

            new_lines+=("$background $icon_foreground$icon $title_foreground$style_before$right_aligned_window_title$style_after%k")
        else
            new_lines+=("$background $icon_foreground$icon  ")
        fi

        ((index++))
    done

    empty_line="%K{$VMUX_BACKGROUND}$(right_align_name " ")"
    pane_height=$LINES
    while [[ "$index" -le "$pane_height" ]]; do
        new_lines+=("$empty_line")
        ((index ++))
    done

    index=1
    for line in "$new_lines[@]"; do
        if [[ "$input" == "force" || "$line" != "$lines[$index]" ]]; then
            printf "\\e[$index;0H"
            print -nP "$line"
        fi
        ((index ++))
    done

    lines=("$new_lines[@]")
}

function right_align_name() {
    printf "%${column_width}.${column_width}s" "$1 "
}

function left_align_name() {
    printf "%-${column_width}.${column_width}s" " $1"
}

clear

while ! vmux has-session -t "$session_name:" > /dev/null 2>&1; do
    sleep 1
done

session_id="$(vmux display-message -t "$session_name:" -p '#{session_id}')"

if ! refresh ""; then
    rm "$VMUX_STATUS_PIPE"
    exit
fi

while true; do
    input="$(cat "$VMUX_STATUS_PIPE"; echo x)"
    input="${input%x}"
    for x in "${(@f)input}"; do
        if ! refresh "$x"; then
            rm "$VMUX_STATUS_PIPE"
            exit
        fi
    done
done
